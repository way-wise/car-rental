generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id                   String     @id @default(ulid())
  email                String     @unique
  name                 String?
  phone                String?
  emailVerified        Boolean    @default(false)
  image                String?
  role                 UserRole?  @default(user)
  banned               Boolean?   @default(false)
  banReason            String?
  banExpires           Int?
  stripeCustomerId     String?    @unique
  defaultPaymentMethod String?
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
  accounts             accounts[]
  bookings             bookings[]
  sessions             sessions[]
  blogs                blogs[]

  @@index([email])
  @@index([role])
  @@index([createdAt])
}

model sessions {
  id             String   @id @default(ulid())
  token          String   @unique
  expiresAt      DateTime
  impersonatedBy String?
  ipAddress      String?
  userAgent      String?
  userId         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, token])
  @@index([expiresAt])
}

model accounts {
  id                    String    @id @default(ulid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  users     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@index([userId])
}

model verifications {
  id         String   @id @default(ulid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([identifier])
  @@index([expiresAt])
}

model bookings {
  id                    String        @id @default(ulid())
  userId                String
  pickupLocation        String
  dropLocation          String
  bookingDate           DateTime
  bookingTime           String
  distance              Float?
  duration              Float?
  stripePaymentIntentId String?       @unique
  paymentStatus         PaymentStatus @default(pending)
  bookingStatus         BookingStatus @default(upcoming)
  amount                Int
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  user                  users         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([paymentStatus])
  @@index([bookingStatus])
  @@index([bookingDate])
  @@index([createdAt])
}

model fuelReports {
  id               String   @id @default(ulid())
  currentOdometer  Float
  previousOdometer Float
  fuelVolume       Float
  fuelUnitPrice    Float
  fuelCost         Float
  mileage          Float
  notes            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([createdAt])
  @@index([currentOdometer])
}

model maintenance {
  id              String   @id @default(ulid())
  maintenanceType String
  cost            Float
  odometerReading Float
  details         String
  serviceProvider String?
  nextServiceDue  String?
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([maintenanceType])
  @@index([createdAt])
  @@index([odometerReading])
}

model settings {
  id                String      @id @default(ulid())
  pricingType       PricingType @default(kilometer)
  pricePerKilometer Float?
  pricePerHour      Float?
  basePrice         Float       @default(0)
  minimumPrice      Float       @default(0)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@index([createdAt])
}

model blogs {
  id              String     @id @default(ulid())
  title           String
  slug            String     @unique
  content         String
  excerpt         String?
  featuredImage   String?
  status          BlogStatus @default(draft)
  publishedAt     DateTime?
  authorId        String
  tags            String[]
  metaTitle       String?
  metaDescription String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  author          users      @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([publishedAt])
  @@index([authorId])
  @@index([createdAt])
  @@index([slug])
}

enum UserRole {
  admin
  user
}

enum PaymentStatus {
  pending
  succeeded
  failed
  canceled
  refunded
}

enum BookingStatus {
  upcoming
  ongoing
  completed
  canceled
}

enum PricingType {
  kilometer
  hour
}

enum BlogStatus {
  draft
  published
  archived
}
