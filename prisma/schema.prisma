generator client {
  provider        = "prisma-client"
  previewFeatures = ["relationJoins"]
  output          = "generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id                   String     @id @default(ulid())
  email                String     @unique
  name                 String
  emailVerified        Boolean
  image                String?
  role                 String?
  banned               Boolean?
  banReason            String?
  banExpires           Int?
  stripeCustomerId     String?    @unique
  defaultPaymentMethod String? // Stripe payment method ID
  createdAt            DateTime
  updatedAt            DateTime
  sessions             sessions[]
  accounts             accounts[]
  bookings             bookings[]
}

model sessions {
  id             String   @id @default(ulid())
  expiresAt      DateTime
  token          String   @unique
  impersonatedBy String?
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  user           users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, token])
}

model accounts {
  id                    String    @id @default(ulid())
  accountId             String
  providerId            String
  userId                String
  user                  users     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@index([userId])
}

model verifications {
  id         String    @id @default(ulid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@index([identifier])
}

model bookings {
  id                    String   @id @default(ulid())
  userId                String
  user                  users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  pickupLocation        String
  dropLocation          String
  bookingDate           DateTime
  bookingTime           String
  stripePaymentIntentId String?  @unique
  paymentStatus         String   @default("pending") // pending, succeeded, failed
  amount                Int // amount in cents
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@index([userId])
}

model fuelReports {
  id               String   @id @default(ulid())
  currentOdometer  Float
  previousOdometer Float
  fuelVolume       Float
  fuelUnitPrice    Float
  fuelCost         Float // calculated: fuelVolume * fuelUnitPrice
  mileage          Float // calculated: currentOdometer - previousOdometer
  notes            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model maintenance {
  id              String   @id @default(ulid())
  maintenanceType String
  cost            Float
  odometerReading Float
  details         String
  serviceProvider String?
  nextServiceDue  String?
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model settings {
  id                String   @id @default(ulid())
  pricingType       String   @default("kilometer") // "kilometer" or "hour"
  pricePerKilometer Float?
  pricePerHour      Float?
  basePrice         Float    @default(0)
  minimumPrice      Float    @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}
